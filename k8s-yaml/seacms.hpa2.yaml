#创建namespace: cms
apiVersion: v1  #指定了 Kubernetes API 的版本为v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: cms    #与命名空间名一致
  name: cms
---
#创建StorageClass
#在 k8s 1.20 之后，出于对性能和统一 apiserver 调用方式的初衷，k8s 移除了对 SelfLink 的支持，而默认上面指定的 provisioner 版本需要 SelfLink 功能，因此 PVC 无法进行自动制备。
#参考链接：https://juejin.cn/post/7329867093871116298
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer  #WaitForFirstConsumer模式，将推迟绑定PV直到Pod实际需要它，这有助于确保Pod与正确的PV配对
---
#创建一个PV,挂载本地目录/seacms/app
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    volume: seacms-app
  name: seacms-app
  #namespace: cms                 #PV是集群资源，不是命名空间资源
spec:
  capacity:
    storage: 30Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain #回收策略，保留，需要手动回收
  storageClassName: local-storage       #使用local-storage存储组策略
  #hostPath:         #local卷类型应该使用spec.local.path而不是hostPath
  local:
    path: /seacms/app  #本地存储路径，必须事先存在于节点上
  nodeAffinity:   #确保PV与特定节点关联
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - k8s-master    #指定了节点亲和性以确保该PV仅能在名为k8s-master的节点上使用
---
#创建一个PVC(seacms-app)，绑定PV(seacms-app）
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: seacms-app
  namespace: cms
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 30Mi
  storageClassName: local-storage       #使用local-storage存储组策略
  selector:
    matchLabels:
      volume: seacms-app  #通过label绑定PV(seacms-app)
---
#创建一个PV挂载本地目录/seacms/mdb
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    volume: seacms-mdb
  name: seacms-mdb
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain #回收策略，保留，需要手动回收
  storageClassName: local-storage
  local:
    path: /seacms/mdb
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - k8s-master  #指定了节点亲和性以确保该PV仅能在名为k8s-master的节点上使用
---
#创建一个PVC(seacms-mdb)，绑定PV(seacms-mdb）
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: seacms-mdb
  namespace: cms
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-storage       #使用local-storage存储组策略
  selector:
    matchLabels:
      volume: seacms-mdb  #通过label绑定PV(seacms-mdb)
---
#创建一个StatefulSet类型的app(seacms-app)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: seacms-app
  namespace: cms
spec:
  serviceName: seacms-app  #Headless Service
  replicas: 1
  selector:
    matchLabels:
      app: seacms
  template:
    metadata:
      labels:
        app: seacms
    spec:
      containers:
      - name: seacms-app
        image: seacms-app
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args: ["/run.sh && tail -f /dev/null"]
        resources:
          requests:
            cpu: "50m"
            memory: "50Mi"
        ports:
        - containerPort: 80
          name: web
          protocol: TCP
        volumeMounts:
        - mountPath: "/var/www/localhost/htdocs"
          name: seacmsapp
      volumes:
      - name: seacmsapp
        persistentVolumeClaim:
          claimName: seacms-app  #PVC名字
---
#创建一个Deployment类型的app(seacms-mdb)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seacms-mdb
  namespace: cms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: seacms
  template:
    metadata:
      labels:
        app: seacms
    spec:
      containers:
      - name: seacms-mdb
        image: seacms-mdb
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args: ["/run.sh && tail -f /dev/null"]
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
        volumeMounts:
        - mountPath: "/var/lib/mysql"
          name: seacmsmdb
      volumes:
      - name: seacmsmdb
        persistentVolumeClaim:
          claimName: seacms-mdb  #PVC名字
---
apiVersion: v1
kind: Service
metadata:
  labels:
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: seacms
  name: seacms
  namespace: cms
spec:
  ports:
  - name: web
    protocol: TCP
    port: 80           #service对外端口
    targetPort: 80     #容器端口
    nodePort: 30080    #nodeport
  - name: mysql
    protocol: TCP
    port: 3306
    targetPort: 3306
    nodePort: 30306
  selector:
    app: seacms
  type: NodePort
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: seacms-app
  namespace: cms
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: seacms-app
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: ContainerResource
    containerResource:
      name: cpu #或memory
      container: seacms-app  #目标容器名称
      target:
        type: Utilization
        averageUtilization: 80
